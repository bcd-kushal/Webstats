---
import Accordion from "../utils/Accordion.astro"

const countryStats = [
    {
        continent: "Europe",
        total: "140",
        data: [
            { country: "Romania", views: 30 },
            { country: "France", views: 0 },
        ]
    },
    {
        continent: "Asia",
        total: "140",
        data: [
            { country: "India", views: 19 },
            { country: "S Korea", views: 21 },
        ]
    },
    /* {
        continent: "Africa",
        total: "140",
        data: [
            { country: "", views: "" },
            { country: "", views: "" },
            { country: "", views: "" },
        ]
    }, */
    {
        continent: "N America",
        total: "140",
        data: [
            { country: "Illinois", views: 62 },
            { country: "USA", views: 7 },
        ]
    },
    {
        continent: "S America",
        total: "140",
        data: [
            { country: "Brazil", views: 2},
            { country: "Chile", views: 47 },
        ]
    },
    {
        continent: "Australia",
        total: "140",
        data: [
            { country: "Australia", views: 34 },
        ]
    },
]

const timingData = [
    { type: "Morning",  logo: "timings/morning.svg",  views: "2452" },
    { type: "Evening",  logo: "timings/evening.svg",  views: "1467" },
    { type: "Night",  logo: "timings/night.svg",  views: "864" },
    { type: "Late night",  logo: "timings/late_ngiht.svg",  views: "168" },
]
---

<section class="flex flex-wrap items-stretch justify-between *:w-full *:md:w-1/2">

    <!-- left section -->
    <section class="md:border-r-[1px] h-full md:border-[#63636330] md:pr-4">
        <Accordion title="Countries">
            <div class="text-[#f6737373] py-4 grid items-center text-center">nivo continent heatmap</div>
            <div class="flex items-start justify-between gap-3">

                <!-- left side -->
                <article class="min-w-[180px]">
                    <!-- continent grouping -->
                    {countryStats.map( continent => (
                        <div class="group/continent flex flex-col gap-1 items-stretch justify-start mt-5">   
                            <span class=" text-[10px] tracking-[0.16em] text-[#f67373] *:tracking-[0.16em] *:text-[#f67373] flex justify-between">{continent.continent.toUpperCase()} <span class="group-hover/continent:opacity-100 opacity-0 transition-opacity duration-300">{continent.total}</span></span>
                            <section class="pl-3 *:leading-relaxed">
                                {continent.data.map( country => (
                                    <div class="flex justify-between items-start *:duration-300 *:transition-colors *:hover:text-[#f67373]">
                                        <span>{country.country}</span>
                                        <span>{country.views}</span>
                                    </div>
                                ))}
                            </section>
                        </div>
                    ))}
                </article>
                

                <div class="">chart</div>
            </div>
        </Accordion>
    
        <Accordion title="Cities">
        </Accordion>
        
        <Accordion title="Platforms & browsers">
        </Accordion>
    </section>
    



    <!-- right section -->
    <section class="md:pl-4">
        <Accordion title="Date & month">
            
        </Accordion>
        
        <Accordion title="Timings">
            <section class="mt-4">
                <div class="flex gap-3 items-center justify-start *:px-3 *:py-1 *:cursor-pointer *:rounded-md *:text-xs">
                    <button class="hover:bg-[#f6737331] transition-colors duration-300">Overall</button>
                    <button class="hover:bg-[#f6737331] transition-colors duration-300">Weekly</button>
                    <button class="bg-[#f6737331] border border-[#f67373] hover:bg-[#f6737331] transition-colors duration-300">Monthly</button>
                </div>
                <div class="">
                    <div class="flex items-start justify-between mt-3 *:flex-1 *:aspect-square *:grid *:items-center *:h-full">
                        <div class="">
                            <span class="cursor-pointer row-start-1 col-start-1 w-fit relative left-1/2 -translate-x-1/2 bg-[#121212] px-4 z-[2] before:content-['320'] before:text-[#f67373] before:absolute before:p-2 before:left-1/2 before:-translate-x-1/2 before:top-[100%] hover:after:content-['Morning'] hover:after:absolute hover:after:p-2 hover:after:left-1/2 hover:after:-translate-x-1/2 hover:after:top-[-150%]  after:opacity-0 hover:after:opacity-100 after:duration-500 after:text-xs after:transition-opacity"> <img src="timings/morning.svg" alt=""/> </span>
                            <span class="row-start-1 col-start-1 border-t-[1.5px]  border-[#fff3] w-1/2 left-1/2 relative"></span>
                        </div>

                        <div class="">
                            <span class="cursor-pointer row-start-1 col-start-1 w-fit relative left-1/2 -translate-x-1/2 bg-[#121212] px-4 z-[2] before:content-['2081'] before:text-[#f67373] before:absolute before:p-2 before:left-1/2 before:-translate-x-1/2 before:top-[100%] hover:after:content-['Evening'] hover:after:absolute hover:after:p-2 hover:after:left-1/2 hover:after:-translate-x-1/2 hover:after:top-[-150%]  after:opacity-0 hover:after:opacity-100 after:duration-500 after:text-xs after:transition-opacity"> <img src="timings/evening.svg" alt=""/> </span>
                            <span class="row-start-1 col-start-1 border-t-[1.5px]  border-[#fff3] relative"></span>
                        </div>
                        
                        <div class="">
                            <span class="cursor-pointer row-start-1 col-start-1 w-fit relative left-1/2 -translate-x-1/2 bg-[#121212] px-4 z-[2] before:content-['202'] before:text-[#f67373] before:absolute before:p-2 before:left-1/2 before:-translate-x-1/2 before:top-[100%] hover:after:content-['Night'] hover:after:absolute hover:after:p-2 hover:after:left-1/2 hover:after:-translate-x-1/2 hover:after:top-[-150%]  after:opacity-0 hover:after:opacity-100 after:duration-500 after:text-xs after:transition-opacity"> <img src="timings/night.svg" alt=""/> </span>
                            <span class="row-start-1 col-start-1 border-t-[1.5px]  border-[#fff3] relative"></span>
                        </div>
                        
                        <div class="">
                            <span class="cursor-pointer row-start-1 col-start-1 w-fit relative left-1/2 -translate-x-1/2 bg-[#121212] px-4 z-[2] before:content-['202'] before:text-[#f67373] before:absolute before:p-2 before:left-1/2 before:-translate-x-1/2 before:top-[100%] hover:after:content-['Overnight'] hover:after:absolute hover:after:p-2 hover:after:left-1/2 hover:after:-translate-x-1/2 hover:after:top-[-150%]  after:opacity-0 hover:after:opacity-100 after:duration-500 after:text-xs after:transition-opacity"> <img src="timings/late_night.svg" alt=""/> </span>
                            <span class="row-start-1 col-start-1 border-t-[1.5px] w-1/2  border-[#fff3] relative"></span>
                        </div>
                    </div>
                </div>
            </section>

        </Accordion>
        
        <Accordion title="Users">
            <div class="2">hello</div>
            <div class="2">hello</div>
        </Accordion>
    </section>
    
</section>



<script>
    const ACCORDION_DROPDOWN_TIME = 500
    const ACCORDION_PULLUP_TIME = 110

    const accordionHeaders = document.querySelectorAll(".accordion-header")
    accordionHeaders.forEach( header => header.addEventListener("click", () => {

        // rotate chevron
        const chevron = header.querySelector(".chev")
        chevron?.animate({
            rotate: chevron.getAttribute("data-rotate") === "0" ? "180deg" : "0deg"
        }, { duration:300, fill:"forwards"})

        chevron?.setAttribute("data-rotate", chevron?.getAttribute("data-rotate") === "0" ? "180" : "0" )


        // get body height
        const accordionBodyHeight = header.parentElement.querySelector(".accordion-body").getBoundingClientRect().height


        // reveal or close parent
        const accordionParent = header.parentElement
        const parentHeight = accordionParent?.getBoundingClientRect().height

        accordionParent?.animate({
            height: parentHeight === 60 ? `${parentHeight+accordionBodyHeight+25}px` : "60px"
        }, { duration: parentHeight === 60 ? ACCORDION_DROPDOWN_TIME : ACCORDION_PULLUP_TIME, fill:"forwards"})


        // set the header as active
        header?.animate({
            background: (header as HTMLElement).getAttribute("data-open") === 'false' ? "#fff1" : 'transparent'
        }, { duration:500, fill:"forwards" })
        header?.setAttribute("data-open", (header as HTMLElement).getAttribute("data-open") === 'false' ? 'true' : 'false')
    }))
</script>