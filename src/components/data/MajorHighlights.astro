---
const { topCities, topCountries, topBrowsers, topTimeRanges, topDates, topPlatforms } = Astro.props

async function mergeSortDescendingWithLimit(obj:object, limit:number) {
    const entries = Object.entries(obj)

    function merge(left, right) {
        let result = []
        let leftIndex = 0
        let rightIndex = 0

        while (leftIndex < left.length && rightIndex < right.length) {
            if (left[leftIndex][1] > right[rightIndex][1]) {
                result.push(left[leftIndex]);
                leftIndex++
            } else {
                result.push(right[rightIndex])
                rightIndex++
            }
        }

        return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))
    }

    function mergeSortRec(arr) {
        if (arr.length <= 1) 
            return arr
        const mid = Math.floor(arr.length / 2)
        const left = arr.slice(0, mid)
        const right = arr.slice(mid)

        return merge( mergeSortRec(left), mergeSortRec(right) )
    }

    const sortedEntries = mergeSortRec(entries)
    const truncatedEntries = sortedEntries.slice(0, limit) 
    const sortedObject = Object.fromEntries(truncatedEntries)
    return sortedObject
}

const LIMIT = 5

const cities = await mergeSortDescendingWithLimit(topCities, LIMIT)
const countries = await mergeSortDescendingWithLimit(topCountries, LIMIT)
const browsers = await mergeSortDescendingWithLimit(topBrowsers, LIMIT)
const timeranges = await mergeSortDescendingWithLimit(topTimeRanges, LIMIT)
const dates = await mergeSortDescendingWithLimit(topDates, LIMIT)
const platforms = await mergeSortDescendingWithLimit(topPlatforms, LIMIT)



const capitalize = (str:string) => { return (str[0].toUpperCase() + str.slice(1)) }
---

<section class="mt-4 mb-6 pt-2 flex flex-wrap md:flex-wrap gap-3 justify-stretch items-stretch *:min-w-full *:md:min-w-[310px] *:rounded-lg *:bg-[#2e2e2e40] *:py-4 *:px-5 *:flex-1 *:transition-colors *:duration-300 *:cursor-pointer *:flex *:flex-col *:md:flex-row *:items-center *:justify-stretch *:gap-4 *:md:gap-10">
    <div class="hover:bg-[#f6737322] group/tab">
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">Country</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(countries).map( ([key,val]) => (
                (parseInt(val as string) > 0 && key!=='null') ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{key}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>

    
    <div class="hover:bg-[#f6737322] group/tab"> 
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">City</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(cities).map( ([key,val]) => (
                (parseInt(val as string) > 0 && key!=='null') ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{key}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>

    
    <div class="hover:bg-[#f6737322] group/tab">
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">Browser</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(browsers).map( ([key,val]) => (
                parseInt(val as string) > 0 ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{key}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>

    <div class="hover:bg-[#f6737322] group/tab">
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">Time</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(timeranges).map( ([key,val]) => (
                parseInt(val as string) > 0 ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{capitalize(key)}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>

    
    <div class="hover:bg-[#f6737322] group/tab">
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">Date</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(dates).map( ([key,val]) => (
                parseInt(val as string) > 0 ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{key}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>

    
    <div class="hover:bg-[#f6737322] group/tab">
        <div class="self-start md:self-center text-2xl md:max-w-[40%] mb-1 md:mb-0 group-hover/tab:text-[#f67373] transition-colors duration-300">Platform</div>
        <div class="flex flex-col gap-1 items-stretch justify-center w-full">
            {Object.entries(platforms).map( ([key,val]) => (
                parseInt(val as string) > 0 ?  (<span class="flex justify-between w-full *:text-[#fff7] *:hover:text-white *:transition-colors *:duration-300"> <span>{key}</span><span>{val}</span> </span>) : <span class="hidden"></span>
            ))}
        </div>
    </div>
</section>